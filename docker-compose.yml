services:
  mongo1:
    container_name: mongo1
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    networks:
      - mongodb-network
    healthcheck:
      test: [
        "CMD-SHELL",
        "echo 'try { rs.status() } catch (err) { rs.initiate({_id:\"rs0\",members:[{_id:0,host:\"mongo1:27017\",priority:1},{_id:1,host:\"mongo2:27017\",priority:0.5},{_id:2,host:\"mongo3:27017\",priority:0.5}]}) }' | mongosh --port 27017 --quiet"
      ]
      interval: 5s
      timeout: 30s
      start_period: 5s
      retries: 30
    volumes:
      - mongo1_data:/data/db
      - mongo1_config:/data/configdb

  mongo2:
    container_name: mongo2
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]  
    networks:
      - mongodb-network
    volumes:
      - mongo2_data:/data/db
      - mongo2_config:/data/configdb
    depends_on:
      - mongo1

  mongo3:
    container_name: mongo3
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    networks:
      - mongodb-network
    volumes:
      - mongo3_data:/data/db
      - mongo3_config:/data/configdb
    depends_on:
      - mongo1

  redis:
    image: redis
    container_name: redis
    restart: always
    networks:
      - mongodb-network

  node-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: node-app
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_HOST=redis # Em produção, o host é o nome do serviço
    ports:
      - "4000:4000"
    networks:
      - mongodb-network
    depends_on:
      mongo1:
        condition: service_healthy
      redis:
        condition: service_started

volumes:
  mongo1_data:
  mongo2_data:
  mongo3_data:
  mongo1_config:
  mongo2_config:
  mongo3_config:

networks:
  mongodb-network:
    driver: bridge